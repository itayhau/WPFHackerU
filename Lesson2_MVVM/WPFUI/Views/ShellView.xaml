<Window x:Class="WPFUI.Views.ShellView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPFUI.Views"
        mc:Ignorable="d" FontSize="18"
        Title="ShellView" Height="300" Width="300" WindowStartupLocation="CenterScreen" >
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20" />
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="20" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="20" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="20" />
        </Grid.RowDefinitions>

        <!-- Click here Window (first line) + F4 > WindowStartUp > CenterScreen -->

        <!-- 1. start with this + also add FontSize=18 in Window (strat page here!) 
        <TextBlock Grid.Row="1" Grid.Column="1">
            Testing
        </TextBlock>
        -->
        
        <!-- 2. 
        <TextBlock Grid.Row="1" Grid.Column="1" x:Name="FirstName">
        </TextBlock>
        -->
        <!-- Run - nothing happens? why?
                because FirstName is empty:
                Go to ShellViewModel.cs
                set _firstName = "Itay" 
                Now run Again!!
                It shows the name since the ViewModel is the backend code!
                Draw a Diagram
        -->
           
        <!-- 3. this will not work since FirstName is already in used
                so how do I connect TextBlock and TextBox into the same value
                you cannot, not like this
                you could modify TextBlock x:Name="FirstName2"
                and then here you can change it to FirstName,
                and you will have the TextBox with FirstName an empty TextBlock
        -->
        <TextBox MinWidth="100" Grid.Row="2" Grid.Column="1" x:Name="FirstName"/>

        <!-- 4. Modify the TextBlock, at 2. 
                Add:
                Text="{Binding Path=FirstName, Mode=OneWay}"
                Remove x:Name="FirstName"
                OneWay binding means: it will not get new input
                Run, change text-box, the text block will not change!!
                We need notify property change,
                set it up at SHellViewModel.cs!!
        -->
        <TextBlock Grid.Row="1" Grid.Column="1" 
                   Text="{Binding Path=FirstName, Mode=OneWay}"
        >
        </TextBlock>


        <!-- 5 -->
        <TextBox MinWidth="100" Grid.Row="2" Grid.Column="2" x:Name="LastName"/>

        <TextBlock Grid.Row="1" Grid.Column="2" 
                   Text="{Binding Path=LastName, Mode=OneWay}"
        >
        </TextBlock>

        <TextBlock Grid.Row="1" Grid.Column="3" 
                   Text="{Binding Path=FullName, Mode=OneWay}"
        >
        </TextBlock>
        <!-- when you write the text-block column expands!!! -->
        <!-- you can ADD: Grid.ColumnSpan="2" -->
        <!-- you can ADD: MaxWidth -->

        <!-- Better to add comment saying
            Row 1
            Row 2
            Much easier to read!!
        
            OneWayToSource = go from this from ==> to the property
            the opposite of OneWay (which is from the property to here)
        -->
        
        <!-- 6 Combo box -->
        <ComboBox Grid.Row="1" Grid.Column="1" 
                  x:Name="People" 
                  SelectedItem="{Binding Path=SelectedPerson, Mode=OneWayToSource}"
                  DisplayMemberPath="FirstName" />
        
        <!-- Now lets add the selected person last name 
             user underscore _
             [name]_[property]
        -->
        <TextBlock Grid.Row="3" Grid.Column="2" 
                   x:Name="SelectedPerson_LastName"
                   ></TextBlock>
        
        <!-- Row 4 -->
        <!-- add ClearText method to ShellViewModel 
             you only need the method name to be same as the Button x:Name
        -->
        <Button x:Name="ClearText" Grid.Row="4" Grid.Column="1">Clear Names</Button>
        <!-- what if we don't want the button to be enabled if there are no name? 
             add CanClearText method in ShellViewModel - returns bool
        -->

        <!-- Row 5 -->
        <Button x:Name="LoadPageOne" Grid.Row="5" Grid.Column="1">Load First Page</Button>
        <Button x:Name="LoadPageTwo" Grid.Row="5" Grid.Column="2">Load Second Page</Button>

        <!-- Row 6 -->
        <ContentControl Grid.Row="6" Grid.Column="1" Grid.ColumnSpan="5"
                        x:Name="ActiveItem" />
    </Grid>
</Window>
